name: Rust

on:
  workflow_call:
    inputs:
      cargo-features:
        required: false
        type: string
        default: ""
      # Perform no features run
      cargo-no-features:
        required: false
        type: boolean
        default: false
      # Enables valgrind
      valgrind:
        required: false
        type: boolean
        default: false
      # Enables MIRI
      miri:
        required: false
        type: boolean
        default: false
      miri_flags:
        required: false
        type: string
        default: ''
      miri_rust_flags:
        required: false
        type: string
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - id: vars
      env:
        FEATURES: ${{ inputs.cargo-features }}
      run: |
        echo "::notice::Run with following features=$FEATURES"
        OUTPUT=""
        if [ -n "${FEATURES}" ]; then
          OUTPUT="--features ${FEATURES}"
        fi
        echo "CARGO_ARGS=$OUTPUT" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v4

    - name: Install Rust Unix
      run: |
        if rustup --version >/dev/null 2>&1; then
            rustup update
        else
             curl https://sh.rustup.rs -sSf | sh -s -- -y --profile minimal --default-toolchain stable
             echo ::add-path::$HOME/.cargo/bin
        fi

    - name: Install Miri
      if: inputs.miri != false
      run: |
        rustup toolchain install nightly
        rustup +nightly component add miri

    - name: Install Valgrind
      if: inputs.valgrind != false
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind

    - name: Rust version
      run: |
        cargo --version
        rustc --version

    - name: Check build no features
      if: inputs.cargo-no-features == true
      run: cargo clippy --no-default-features

    - name: Check build
      run: cargo clippy ${{ steps.vars.outputs.CARGO_ARGS }}

    - name: Test
      run: cargo test ${{ steps.vars.outputs.CARGO_ARGS }}

    - name: Valgrind Test
      if: inputs.valgrind != false
      env:
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: "valgrind --leak-check=full --error-exitcode=1"
      run: cargo test --release ${{ steps.vars.outputs.CARGO_ARGS }}

    - name: Miri Test
      if: inputs.miri != false
      env:
        MIRIFLAGS: ${{ inputs.miri_flags }}
        RUSTFLAGS: ${{ inputs.miri_rust_flags }}
      run: cargo +nightly miri test ${{ steps.vars.outputs.CARGO_ARGS }}
