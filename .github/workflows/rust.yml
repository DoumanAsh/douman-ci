name: Rust

on:
  workflow_call:
    inputs:
      # Array expression with quoted list of github runners
      os-matrix:
        required: false
        type: string
        default: '["ubuntu-latest"]'
      cargo-features:
        required: false
        type: string
        default: ""
      # Minimal rust version check
      min-rustc-version:
        required: false
        type: string
        default: ""
      # Perform no features run
      cargo-no-features:
        required: false
        type: boolean
        default: false
      # Enables valgrind
      valgrind:
        required: false
        type: boolean
        default: false
      valgrind_flags:
        required: false
        type: string
        default: ''
      # Enables MIRI
      miri:
        required: false
        type: boolean
        default: false
      miri_flags:
        required: false
        type: string
        default: ''
      miri_rust_flags:
        required: false
        type: string
        default: ''

jobs:
  build:
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.os-matrix) }}
    runs-on: ${{ matrix.os }}

    steps:
    - id: vars
      if: inputs.cargo-features != ''
      run: |
        echo "::notice::Run with following features=${{ inputs.cargo-features }}"
        echo "CARGO_ARGS='--features ${{ inputs.cargo-features }}'" >> $GITHUB_OUTPUT

    - uses: actions/checkout@v5

    - name: Check Rust installation is up to date
      run: rustup update

    - name: Install Miri
      if: inputs.miri != false
      run: |
        rustup toolchain install nightly
        rustup +nightly component add miri

    - name: Install Valgrind
      if: inputs.valgrind != false && runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y valgrind

    - name: Rust version
      run: |
        cargo --version
        rustc --version

    - name: Check ${{inputs.min-rustc-version}} rustc version
      if: inputs.min-rustc-version != ''
      run: |
        rustup install ${{ inputs.min-rustc-version }}
        cargo +${{ inputs.min-rustc-version }} check

    - name: Check build no features
      if: inputs.cargo-no-features == true
      run: cargo clippy --no-default-features

    - name: Check build
      run: cargo clippy ${{ steps.vars.outputs.CARGO_ARGS }}

    - name: Test
      run: cargo test ${{ steps.vars.outputs.CARGO_ARGS }}

    - name: Valgrind Test
      if: inputs.valgrind != false && runner.os == 'Linux'
      env:
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_RUNNER: "valgrind --leak-check=full --error-exitcode=1 ${{ inputs.valgrind_flags }}"
      run: cargo test ${{ steps.vars.outputs.CARGO_ARGS }}

    - name: Miri Test
      if: inputs.miri != false
      env:
        MIRIFLAGS: ${{ inputs.miri_flags }}
        RUSTFLAGS: ${{ inputs.miri_rust_flags }}
      run: cargo +nightly miri test ${{ steps.vars.outputs.CARGO_ARGS }}
